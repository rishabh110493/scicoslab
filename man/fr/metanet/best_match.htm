<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>best_match</title>
</head>
<body bgcolor="#FFFFFF">
<center>Scilab function  </center>
<div align="right">Last update : 29/02/2016</div>
<p><b>best_match</b> -  meilleur appariement d'un graphe  </p>
<h3><font color="blue">Calling Sequence</font></h3>
<dl><dd><tt>[card,match] = best_match(g)  </tt></dd></dl>
<h3><font color="blue">Parameters</font></h3>
<ul>
<li>
<tt><b>g  </b></tt>
    : graphe (liste) 
</li>
<li>
<tt><b>card  </b></tt>
    : entier 
</li>
<li>
<tt><b>match  </b></tt>
    : vecteur ligne d'entiers 
</li>
</ul>
<h3><font color="blue">Description</font></h3>
<p><tt><b>best_match</b></tt> trouve un appariement optimal pour le graphe <tt><b>g</b></tt>.
    Les sorties sont <tt><b>card</b></tt> et le vecteur <tt><b>match</b></tt>. <tt><b>card</b></tt> est la 
    cardinalité d'un appariement optimal de g. <tt><b>match(i)</b></tt> est le sommet adjacent
    au sommet <tt><b>i</b></tt> dans l'appariement optimal ou 0 si <tt><b>i</b></tt> n'est pas apparié.
  </p>
<h3><font color="blue">Examples</font></h3>
<pre>
  
ta=[27 27 3 12 11 12 27 26 26 25 25 24 23 23 21 22 21 20 19 18 18];
ta=[ta  16 15 15 14 12 9 10 6 9 17 8 17 10 20 11 23 23 12 18 28]; 
he=[ 1  2 2  4  5 11 13  1 25 22 24 22 22 19 13 13 14 16 16  9 16];
he=[he  10 10 11 12  2 6  5 5 7  8 7  9  6 11  4 18 13  3 28 17];
n=28;
g=make_graph('foo',0,n,ta,he);
xx=[46 120 207 286 366 453 543 544 473 387 300 206 136 250 346 408];
g('node_x')=[xx 527 443 306 326 196 139 264  55  58  46 118 513];
yy=[36  34  37  40  38  40  35 102 102  98  93  96 167 172 101 179];
g('node_y')=[yy 198 252 183 148 172 256 259 258 167 109 104 253];
show_graph(g);
[card,match] = best_match(g);
sp=sparse([ta' he'],[1:size(ta,2)]',[n,n]);
sp1=sparse([[1:n]' match'],ones(1,size(match,2))',[n,n]);
[ij,v,mn]=spget(sp.*sp1);
show_arcs(v');
//
// AVEC UN GRAPHE PLUS GRAND
g=load_graph(SCI+'/demos/metanet/mesh1000');
g('directed')=0;
ta=g('tail');he=g('head');n=node_number(g);
show_graph(g,'new',1/2,[1000,400]);
[card,match] = best_match(g);
sp=sparse([ta' he'],[1:size(ta,2)]',[n,n]);
sp1=sparse([[1:n]' match'],ones(1,size(match,2))',[n,n]);
[ij,v,mn]=spget(sp.*sp1);
show_arcs(v');
 
 </pre>
<h3><font color="blue">See Also</font></h3>
<p><a href="../../../../../../home/jpc/Download/scicoslab/man/fr/metanet/perfect_match.htm"><tt><b>perfect_match</b></tt></a>,&nbsp;&nbsp;</p>
</body>
</html>
