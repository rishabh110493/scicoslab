<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2008 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>minmax_routcos</TITLE>
<META NAME="description" CONTENT="minmax_routcos">
<META NAME="keywords" CONTENT="minmax_routcos">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2008">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="minmax_routcos.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Fonction de calcul
<BR><A NAME="tex2html1"
  HREF="./minmax_routcos.htm">fr</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="minmax_routcos"></A>
<BR>
minmax
</H2>

<H3><font color="blue"><A NAME="SECTION00011000000000000000">
Contenu du fichier</A>
</font></H3>
<BR>
<PRE  CLASS="verbatim">#include &lt;math.h&gt;
#include "scicos_block4.h"
#include &lt;stdio.h&gt;

#ifndef min
#define min(a,b) ((a) &lt;= (b) ? (a) : (b))
#endif

#ifndef max
#define max(a,b) ((a) &gt;= (b) ? (a) : (b))
#endif

void minmax(scicos_block *block,int flag)
{ /*ipar[0]=1 -&gt; min,  ipar[0]=2 -&gt; max */
  int *_ipar=GetIparPtrs(block);
  int _nin=GetNin(block);
  int _ng=GetNg(block);
  double *_g=GetGPtrs(block);
  int *_mode=GetModePtrs(block);
  double *_u1=GetRealInPortPtrs(block,1);
  double *_y1=GetRealOutPortPtrs(block,1);
  double *_u2=GetRealInPortPtrs(block,2);
  double *uytmp;
  int i;
  double maxmin;

  switch(flag)
    {
      /*----------------------------------------*/      
    case 1:
      switch(_nin)
	{ 
	  /*------------------------*/
	case 1:
	  if( _ng==0 || !areModesFixed(block)){
	    maxmin=_u1[0];
	    for (i=1;i&lt;GetInPortRows(block,1);++i){
	      if(_ipar[0]==1){
		if(_u1[i]&lt;maxmin)  maxmin=_u1[i];
	      } else {
		if(_u1[i]&gt;maxmin)  maxmin=_u1[i];
	      }
	    }
	  }else{
	    maxmin=_u1[_mode[0]-1];
	  }

	  _y1[0]=maxmin;
	  break;
	  /*------------------------*/
	case 2:
	  for (i=0;i&lt;GetInPortRows(block,1);++i){
	    if( _ng==0 || !areModesFixed(block)){
	      if(_ipar[0]==1){
		_y1[i]=min(_u1[i],_u2[i]);
	      } else {
		_y1[i]=max(_u1[i],_u2[i]);
	      }
	    }else{
	      uytmp=GetRealInPortPtrs(block,_mode[0]-1+1);
	      _y1[i]=uytmp[i];
	    }
	  }
	  break;
	    /*------------------------*/
	default: break;
	}
      break;
      /*----------------------------------------*/
    case  9:
      switch(_nin)
	{ 
	  /*------------------------*/
	case 1:
	  if (areModesFixed(block)){
	    for (i=0;i&lt;GetInPortRows(block,1);++i){
	      if(i!=_mode[0]-1){
		_g[i]=_u1[i]-_u1[_mode[0]-1];
	      }else{
		_g[i]=1.0;
	      }
	    }
	  } else {
	    maxmin=_u1[0];
	    _mode[0]=1;
	    for (i=1;i&lt;GetInPortRows(block,1);++i){
	      if(_ipar[0]==1){
		if(_u1[i]&lt;maxmin) {
		  maxmin=_u1[i];
		  _mode[0]=i+1;
		}
	      } else {
		if(_u1[i]&gt;maxmin) {
		  maxmin=_u1[i];
		  _mode[0]=i+1;
		}
	      }
	    }
	  }
	  break;
	  /*------------------------*/
	case 2:
	  for (i=0;i&lt;GetInPortRows(block,1);++i){
	    _g[i]=_u1[i]-_u2[i];
	    if (!areModesFixed(block)){
	      if(_ipar[0]==1){
		if(_g[i]&gt;0) {
		  _mode[i]=2;
		}else{
		  _mode[i]=1;
		}
	      }else{
		if(_g[i]&lt;0) {
		  _mode[i]=2;
		}else{
		  _mode[i]=1;
		}
	      }
	    }
	  }
	  break;
	  /*------------------------*/
	default : 
	  break;
	}
      break;
      /*----------------------------------------*/
    default: 
      break;      
    }
}

</PRE>

<BR>




</BODY>
</HTML>
