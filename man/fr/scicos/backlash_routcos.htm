<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2008 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>backlash_routcos</TITLE>
<META NAME="description" CONTENT="backlash_routcos">
<META NAME="keywords" CONTENT="backlash_routcos">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2008">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="backlash_routcos.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Fonction de calcul
<BR><A NAME="tex2html1"
  HREF="./backlash_routcos.htm">fr</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="backlash_routcos"></A>
<BR>
backlash
</H2>

<H3><font color="blue"><A NAME="SECTION00011000000000000000">
Contenu du fichier</A>
</font></H3>
<BR>
<PRE  CLASS="verbatim">
#include "scicos_block4.h"
#include &lt;math.h&gt;

#ifndef NULL
#define NULL    0
#endif

void backlash(scicos_block *block,int flag)
{ 
  void **_work=GetPtrWorkPtrs(block);
  double *_rpar=GetRparPtrs(block);
  double *_g=GetGPtrs(block);
  double *_u1=GetRealInPortPtrs(block,1);
  double *_y1=GetRealOutPortPtrs(block,1);
  double* rw;
  double t=GetScicosTime(block);

  if (flag == 4){/* the workspace is used to store previous values */
    if ((*_work=	 scicos_malloc(sizeof(double)* 4))== NULL ) {
      set_block_error(-16);
      return;
    }
    rw=*_work; 
    rw[0]=t;
    rw[1]=t;
    rw[2]=_rpar[0];
    rw[3]=_rpar[0];
  }else  if (flag == 5){
    scicos_free(*_work);
  }else  if (flag == 1) {
    rw=*_work;
    if ( !isinTryPhase(block) ){
      if(t&gt;rw[1]) {
	rw[0]=rw[1];
	rw[2]=rw[3];
      }
      rw[1]=t;
      if(_u1[0]&gt;rw[2]+_rpar[1]/2){
	rw[3]=_u1[0]-_rpar[1]/2;
      } else if (_u1[0]&lt;rw[2]-_rpar[1]/2){
	rw[3]=_u1[0]+_rpar[1]/2;
      } else {
	rw[3]=rw[2];
      }
    }
    _y1[0]=rw[3];
  }  else if (flag == 9) {
    rw=*_work;
    if(t&gt;rw[1]){
      _g[0] = _u1[0]-_rpar[1]/2-rw[3];
      _g[1] = _u1[0]+_rpar[1]/2-rw[3];
    }else{
      _g[0] = _u1[0]-_rpar[1]/2-rw[2];
      _g[1] = _u1[0]+_rpar[1]/2-rw[2];
    }
    _g[0] = _u1[0]-_rpar[1]/2-rw[2];
    _g[1] = _u1[0]+_rpar[1]/2-rw[2];
  } 
}
</PRE>

<BR>




</BODY>
</HTML>
