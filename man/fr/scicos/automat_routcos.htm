<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2008 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>automat_routcos</TITLE>
<META NAME="description" CONTENT="automat_routcos">
<META NAME="keywords" CONTENT="automat_routcos">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2008">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="automat_routcos.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Fonction de calcul
<BR><A NAME="tex2html1"
  HREF="./automat_routcos.htm">fr</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="automat_routcos"></A>
<BR>
automat
</H2>

<H3><font color="blue"><A NAME="SECTION00011000000000000000">
Contenu du fichier</A>
</font></H3>
<BR>
<PRE  CLASS="verbatim">#include "scicos_block4.h"
# include "../machine.h"

/* A swithcing mechansim for building hybrid automata */
/* Masoud Najafi, 2007, INRIA */

void automat(scicos_block *block,int flag)
{
  
  double * y0, *y1, *ui;
  double* g=GetGPtrs(block);
  double* x=GetState(block);
  double* xd=GetDerState(block);
  double* res=GetResState(block); 
  void**   work=GetPtrWorkPtrs(block);
  double* rpar=GetRparPtrs(block);
  double* evout= GetNevOutPtrs(block);

  int* ipar=GetIparPtrs(block);
  int* jroot=GetJrootPtrs(block);
  int  nevprt=GetNevIn(block);
  int ng=GetNg(block);

  int* Mode;
  int  NMode, NX, Minitial,i,j,k,Mi,Mf,indice;
  int* property=GetXpropPtrs(block);
  int* iparXp;
  int* iparCx;
  double* rparX0;
  int test;
  NMode=ipar[0];
  Minitial=ipar[1];
  NX=ipar[2];
  iparXp=ipar+3;
  iparCx=iparXp+NX*NMode;
  rparX0=rpar;


  if (flag ==4){/*----------------------------------------------------------*/
    if ((*work=scicos_malloc(sizeof(int)*(2)))== NULL ) {set_block_error(-16); return; }
    Mode=*work;
    Mode[0]=Minitial;/*Current Mode;*/
    Mode[1]=Minitial;/* Previous Mode*/
    for (i=0;i&lt;NX;i++) property[i]=0; /* xproperties*/
    for (i=0;i&lt;NX;i++) x[i]=rparX0[i];

  }else if (flag ==5){/**----------------------------------------------------------*/
    scicos_free(*work);
  }else if  (flag ==1 || flag ==6){/*----------------------------------------------------------*/
    y0=GetRealOutPortPtrs(block,1);
    y1=GetRealOutPortPtrs(block,2);

    Mode=*work;
    Mi=Mode[0];
    y0[0]=Mi;/*current Mode*/
    y0[1]=Mode[1];/*prevous Mode*/
    for (i=0;i&lt;NX;i++){
      y1[i]=x[i];
      y1[i+NX]=xd[i];
    }
  }else if (flag==0){ /*----------------------------------------------------------*/
    Mode=*work;
    Mi=Mode[0];
    ui=GetRealInPortPtrs(block,Mi);
    for (i=0;i&lt;NX;i++)
      res[i]= ui[i];

  }else if (flag==7){/*----------------------------------------------------------*/
    Mode=*work;
    Mi=Mode[0];
    for (i=0;i&lt;NX;i++)
      property[i] = iparXp[(Mi-1)*NX+i];

  }else if (flag==9){/*----------------------------------------------------------*/
    Mode=*work;
    Mi=Mode[0];
    ui=GetRealInPortPtrs(block,Mi);

    for (j=0;j&lt;ng;j++) g[j]=0;
    for (j=0;j&lt;GetInPortRows(block,Mi-1+1)-2*NX;j++) {
      g[j]=ui[j+2*NX];
      }

  }else if ((flag==3)&amp;&amp;(nevprt&lt;0)){
    Mode=*work;
    Mi=Mode[0];
    indice=0;
    for (i=1;i&lt;Mi;i++)  
      indice+=GetInPortRows(block,i-1+1)-2*NX; /*number of modes before Mi_th Mode */
    for (k=0;k&lt;GetInPortRows(block,Mi-1+1)-2*NX;k++)
      if(jroot[k]==1){
	evout[0]=0.0;
	break;
      }
  }else if ((flag==2)&amp;&amp;(nevprt&lt;0)){/*----------------------------------------------------------*/
    Mode=*work;
    Mi=Mode[0];
    indice=0;
    Mf=Mi;/* in case where the user has defined a wrong mode destination or ZC direction.*/
    for (i=1;i&lt;Mi;i++)  
      indice+=GetInPortRows(block,i-1+1)-2*NX; /*number of modes before Mi_th Mode*/
    test=0;
    for (k=0;k&lt;GetInPortRows(block,Mi-1+1)-2*NX;k++){
      if(jroot[k]==1){
	Mf=iparCx[indice+k]; 
	Mode[0]=Mf;/* saving the new Mode*/
	Mode[1]=Mi;/* saving the previous Mode*/
	test=1;
	break;
      }
    }
    if (test==0){
      for (k=0;k&lt;GetInPortRows(block,Mi-1+1)-2*NX;k++) if(jroot[k]==-1) break;
      /*      sciprint("\n\r Warning!: In Mode=%d, the jump condition #%d has crossed zero in negative dierction",Mi,k+1); */
    }
    ui=GetRealInPortPtrs(block,Mf);
    for (i=0;i&lt;NX;i++)
      x[i]=ui[i+NX]; /*reinitialize the states*/    
  }
}

</PRE>

<BR>




</BODY>
</HTML>
