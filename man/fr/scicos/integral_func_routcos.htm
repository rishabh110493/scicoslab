<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2008 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>integral_func_routcos</TITLE>
<META NAME="description" CONTENT="integral_func_routcos">
<META NAME="keywords" CONTENT="integral_func_routcos">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2008">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="integral_func_routcos.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Fonction de calcul
<BR><A NAME="tex2html1"
  HREF="./integral_func_routcos.htm">fr</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="integral_func_routcos"></A>
<BR>
integral_func
</H2>

<H3><font color="blue"><A NAME="SECTION00011000000000000000">
Contenu du fichier</A>
</font></H3>
<BR>
<PRE  CLASS="verbatim">#include "scicos_block4.h"
#include &lt;math.h&gt;

void  integral_func(scicos_block *block,int flag)
{
  double *_rpar=GetRparPtrs(block);
  double *_xd=GetDerState(block);
  double *_x=GetState(block);
  double *_g=GetGPtrs(block);
  double *_u1=GetRealInPortPtrs(block,1);
  double *_y1=GetRealOutPortPtrs(block,1);
  double *_u2=GetRealInPortPtrs(block,2);
  int *_mode=GetModePtrs(block);
  int _nevprt=GetNevIn(block);
  int _nx=GetNstate(block);
  int _ng=GetNg(block);
  int i;

  switch(flag)
    {
      /*----------------------------------------*/      
    case 0:
      if (_ng&gt;0) {
	for(i=0;i&lt;_nx;++i) {
	  if(_mode[i]==3){
	    _xd[i]=_u1[i];
	  }else{
	    _xd[i]=0.0;
	  }
	}
      }else{
	for(i=0;i&lt;_nx;++i) {
	  _xd[i]=_u1[i];
	}
      }
      break;
      /*----------------------------------------*/
    case 1:
    case 6:
      for(i=0;i&lt;_nx;++i) 
	_y1[i]=_x[i];
      break;
      /*----------------------------------------*/
    case 2:      
      if (_nevprt==1){
	for(i=0;i&lt;_nx;++i) 
	  _x[i]=_u2[i];
      }
      break;
      /*----------------------------------------*/
    case 9:
      
      if (!areModesFixed(block)) {
	for(i=0;i&lt;_nx;++i) {
	  if (_u1[i]&gt;=0 &amp;&amp; _x[i]&gt;=_rpar[i]){
	    _mode[i]=1;
	  }else if (_u1[i]&lt;=0 &amp;&amp; _x[i]&lt;=_rpar[_nx+i]){
	    _mode[i]=2;
	  }else {
	    _mode[i]=3;
	  }
	}
      }

      for(i=0;i&lt;_nx;++i) {
	if (_mode[i]==3){
	  _g[i]=(_x[i]-(_rpar[i]))*(_x[i]-(_rpar[_nx+i]));
	} else {
	  _g[i]=_u1[i];
	}	
      }

      break;
      /*----------------------------------------*/
    default :
      break;
      /*----------------------------------------*/      
    }
}
</PRE>

<BR>




</BODY>
</HTML>
