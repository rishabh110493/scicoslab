<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>qr</title>
</head>
<body bgcolor="#FFFFFF">
<center>Scilab Function  </center>
<div align="right">Last update : 29/02/2016</div>
<p><b>qr</b> -  factorisation QR  </p>
<h3><font color="blue">Calling Sequence</font></h3>
<dl>
<dd><tt>[Q,R]=qr(X [,"e"])  </tt></dd>
<dd><tt>[Q,R,E]=qr(X [,"e"])  </tt></dd>
<dd><tt>[Q,R,rk,E]=qr(X [,tol])  </tt></dd>
</dl>
<h3><font color="blue">Parameters</font></h3>
<ul>
<li>
<tt><b>X  </b></tt>
	    : matrice réelle ou complexe
	  </li>
<li>
<tt><b>tol  </b></tt>
	    : nombre réel positif
	  </li>
<li>
<tt><b>Q  </b></tt>
	    : matrice carrée unitaire
	  </li>
<li>
<tt><b>R  </b></tt>
	    : matrice de même dimensions que <tt><b>X</b></tt>
</li>
<li>
<tt><b>E  </b></tt>
	    : matrice de permutation
	  </li>
<li>
<tt><b>rk  </b></tt>
	    : entier (rang de <tt><b>X</b></tt>)
	  </li>
</ul>
<h3><font color="blue">Description</font></h3>
<p><tt><b>[Q,R] = qr(X)</b></tt> renvoie une matrice triangulaire supérieure
      <tt><b>R</b></tt> de même
      dimensions que <tt><b>X</b></tt> et une matrice carrée othogonale
      (unitaire dans le cas complexe) <tt><b>Q</b></tt> telles que
      <tt><b>X = Q*R</b></tt>.

      <tt><b>[Q,R] = qr(X,"e")</b></tt>  renvoie une decomposition de
      taille réduite: si <tt><b>X</b></tt> est une matrice <tt><b>m x
	n</b></tt> avec <tt><b>m &gt; n</b></tt> alors seulement les
      <tt><b>n</b></tt> premières colonnes de <tt><b>Q</b></tt> sont calculées
      ainsi que les <tt><b>n</b></tt> premières lignes de
      <tt><b>R</b></tt>.   
    </p>
<p>
      Il découle de <tt><b>Q*R = X</b></tt> que la
      <tt><b>k</b></tt>ième colonne de <tt><b>X</b></tt> peut s'exprimer comme
      une combinaison linéaire des <tt><b>k</b></tt> premieres colonnes de
      <tt><b>Q</b></tt> (avec les coefficients <tt><b>R(1,k), ...,
	R(k,k)</b></tt>. Les <tt><b>k</b></tt> premieres colonnes de
      <tt><b>Q</b></tt> forment une base orthogonale du sous espace généré
      par les Les <tt><b>k</b></tt> premieres colonnes de
      <tt><b>X</b></tt>. Si la colonne <tt><b>k</b></tt> de <tt><b>X</b></tt> est
      une combinaison linéaire des <tt><b>p</b></tt> premiéres colonnes de
      <tt><b>X</b></tt> alors les éléments <tt><b>R(p+1,k), ...,
	R(k,k)</b></tt> sont nuls. Dans cette situation <tt><b>R</b></tt> est
      une matrice trapézoidale supérieure. Si <tt><b>X</b></tt> est de rang
      <tt><b>rk</b></tt> alors les lignes  <tt><b>R(rk+1,:), R(rk+2,:),
	...</b></tt> sont nulles.

    </p>
<p><tt><b>[Q,R,E] = qr(X)</b></tt> renvoie une matrice de permutations (de
      colonnes) <tt><b>E</b></tt>,
      une matrice triangulaire supérieure <tt><b>R</b></tt> dont les
      éléments diagonaux sont classés par ordre décroissant et une
      matrice unitaire <tt><b>Q</b></tt> telles que <tt><b>X*E = Q*R</b></tt>.
      si <tt><b>rk</b></tt> est le rang de <tt><b>X</b></tt> les
      <tt><b>rk</b></tt> premiers éléménts diagonaux de <tt><b>R</b></tt> sont
      tous non nuls. <tt><b>[Q,R,E] = qr(X,"e")</b></tt>  renvoie une decomposition de
      taille réduite: si <tt><b>X</b></tt> est une matrice <tt><b>m x
	n</b></tt> avec <tt><b>m &gt; n</b></tt> alors seulement les
      <tt><b>n</b></tt> premières colonnes de <tt><b>Q</b></tt> sont calculées
      ainsi que les <tt><b>n</b></tt> premières lignes de
      <tt><b>R</b></tt>.   
    </p>
<p><tt><b>[Q,R,rk,E] = qr(X [,tol])</b></tt>renvoie de plus 
      <tt><b>rk</b></tt> =rang estimé de <tt><b>X</b></tt>. 
      Plus précisément, 
      <tt><b>rk</b></tt> est le nombre d'éléments diagonaux de
      <tt><b>R</b></tt> supérieurs à <tt><b>tol</b></tt>. La valeur par défaut
      de <tt><b>tol</b></tt> est <tt><b>R(1,1)*%eps*max(size(R))</b></tt></p>
<p>
      renvoie <tt><b>rk</b></tt> = rang estimé de <tt><b>X</b></tt>. Ici,
      <tt><b>rk</b></tt> est le nombre d'éléments diagonaux de <tt><b>R</b></tt>
      supérieurs à <tt><b>R(1,1)*%eps*max(size(R)</b></tt>.
    </p>
<h3><font color="blue">Examples</font></h3>
<pre>
    // QR factorization, generic case
    // X is tall (full rank)
    X=rand(5,2);[Q,R]=qr(X); [Q'*X R]
    //X is fat (full rank)
    X=rand(2,3);[Q,R]=qr(X); [Q'*X R]
    //Column 4 of X is a linear combination of columns 1 and 2:
    X=rand(8,5);X(:,4)=X(:,1)+X(:,2); [Q,R]=qr(X); R, R(:,4)
    //X has rank 2, rows 3 to $ of R are zero:
    X=rand(8,2)*rand(2,5);[Q,R]=qr(X); R
    //Evaluating the rank rk: column pivoting ==&gt; rk first
    //diagonal entries of R are non zero :
    A=rand(5,2)*rand(2,5);
    [Q,R,rk,E] = qr(A,1.d-10);
    norm(Q'*A-R)
    svd([A,Q(:,1:rk)])    //span(A) =span(Q(:,1:rk))
    </pre>
<h3><font color="blue">See Also</font></h3>
<p><a href="../../../../../../home/jpc/Download/scicoslab/man/fr/linear/rank.htm"><tt><b>rank</b></tt></a>,&nbsp;&nbsp;<a href="../../../../../../home/jpc/Download/scicoslab/man/fr/linear/svd.htm"><tt><b>svd</b></tt></a>,&nbsp;&nbsp;<a href="../../../../../../home/jpc/Download/scicoslab/man/fr/linear/rowcomp.htm"><tt><b>rowcomp</b></tt></a>,&nbsp;&nbsp;<a href="../../../../../../home/jpc/Download/scicoslab/man/fr/linear/colcomp.htm"><tt><b>colcomp</b></tt></a>,&nbsp;&nbsp;</p>
<h3><font color="blue">Used Function</font></h3>La décomposition QR est basée sur les routines Lapack  DGEQRF, DGEQPF,
      DORGQR pour les matrices réelles et ZGEQRF, ZGEQPF, ZORGQR pour le cas
      complexe.</body>
</html>
