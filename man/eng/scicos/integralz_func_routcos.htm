<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2008 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>integralz_func_routcos</TITLE>
<META NAME="description" CONTENT="integralz_func_routcos">
<META NAME="keywords" CONTENT="integralz_func_routcos">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2008">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="integralz_func_routcos.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Computational routine
<BR><A NAME="tex2html1"
  HREF="./integralz_func_routcos.htm">eng</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="integralz_func_routcos"></A>
<BR>
integralz_func
</H2>

<H3><font color="blue"><A NAME="SECTION00011000000000000000">
File content</A>
</font></H3>
<BR>
<PRE  CLASS="verbatim">#include "scicos_block4.h"
#include &lt;math.h&gt;

void  integralz_func(scicos_block *block,int flag)
{
  double *_rpar=GetRparPtrs(block);
  double *_xd=GetDerState(block);
  double *_x=GetState(block);
  double *_g=GetGPtrs(block);
  double *ur=GetRealInPortPtrs(block,1);
  double *ui=GetImagInPortPtrs(block,1);
  double *yr=GetRealOutPortPtrs(block,1);
  double *yi=GetImagOutPortPtrs(block,1);
  int _nx=GetNstate(block);
  int _ng=GetNg(block);
  int *_mode=GetModePtrs(block);
  int _nevprt=GetNevIn(block);
  int i;

  switch(flag)
    {
      /*----------------------------------------*/      
    case 0:
      if(_ng&gt;0){
	for(i=0;i&lt;(_nx)/2;++i) {
	  if(_mode[i]==3){
	    _xd[i]=ur[i];
	    _xd[i+(_nx)/2]=ui[i];
	  }else{
	    _xd[i]=0.0;
	    _xd[i+(_nx)/2]=0.0;
	  }
	}
      }else{
	for(i=0;i&lt;(_nx)/2;++i) {
	  _xd[i]=ur[i];
	  _xd[i+(_nx)/2]=ui[i];
	}
      }
      break;
      /*----------------------------------------*/
    case 1:
    case 6:
      for(i=0;i&lt;(_nx)/2;++i) {
	yr[i]=_x[i];
	yi[i]=_x[i+(_nx)/2];
      }
      break;
      /*----------------------------------------*/
    case 2:      
      if (_nevprt==1){
	for(i=0;i&lt;(_nx)/2;++i) {
	  _x[i]=ur[i];
	  _x[i+(_nx)/2]=ui[i];
	}
      } 
      break;
      /*----------------------------------------*/
    case 9:

      if (!areModesFixed(block)) {	  
	for(i=0;i&lt;_nx/2;++i) {
	  if (ur[i]&gt;=0&amp;&amp;_x[i]&gt;=_rpar[i]&amp;&amp;ui[i&gt;=0]&amp;&amp;_x[i+(_nx)/2]&gt;=_rpar[i+(_nx)]){
	    _mode[i]=1;
	  }else if (ur[i]&lt;=0&amp;&amp;_x[i]&lt;=_rpar[(_nx)/2+i]&amp;&amp;ui[i]&lt;=0&amp;&amp;_x[i+(_nx)/2]&lt;=_rpar[3*(_nx)/2+i]){
	    _mode[i]=2;
	  }else {
	    _mode[i]=3;
	  }
	}
      }

      for(i=0;i&lt;_nx/2;++i) {
	if (_mode[i]==3){
	  _g[i]=(_x[i]-(_rpar[i]))*(_x[i]-(_rpar[(_nx)/2+i]));
	  _g[i+(_nx)/2]=(_x[i+(_nx)/2]-(_rpar[i+(_nx)]))*(_x[i+(_nx)/2]-(_rpar[3*(_nx)/2+i]));
	} else {
	  _g[i]=ur[i];
	  _g[i+(_nx)/2]=ui[i];
	} 	
      }
      break;
      /*----------------------------------------*/
    default :
      break;
      /*----------------------------------------*/   
    }
}
</PRE>

<BR>




</BODY>
</HTML>
