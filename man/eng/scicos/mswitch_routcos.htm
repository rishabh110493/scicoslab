<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2008 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>mswitch_routcos</TITLE>
<META NAME="description" CONTENT="mswitch_routcos">
<META NAME="keywords" CONTENT="mswitch_routcos">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2008">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="mswitch_routcos.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Computational routine
<BR><A NAME="tex2html1"
  HREF="./mswitch_routcos.htm">eng</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="mswitch_routcos"></A>
<BR>
mswitch
</H2>

<H3><font color="blue"><A NAME="SECTION00011000000000000000">
File content</A>
</font></H3>
<BR>
<PRE  CLASS="verbatim">#include "scicos_block4.h"
#include &lt;math.h&gt;
#include &lt;memory.h&gt;

#define max(a,b) ((a) &gt;= (b) ? (a) : (b))
#define min(a,b) ((a) &lt;= (b) ? (a) : (b))

void  mswitch(scicos_block *block,int flag)
{
  if ((flag==1)||(flag==6)){
    int i,j,nin,so,my,ny;
    int mu,nu;
    int *ipar;
    double *u1;
    void *uj;    
    void *y;
    j=0;
    y=GetOutPortPtrs(block,1);
    so=GetSizeOfOut(block,1);
    my=GetOutPortRows(block,1);
    ny=GetOutPortCols(block,1);
    u1=GetRealInPortPtrs(block,1);
    ipar=GetIparPtrs(block);
    nin=GetNin(block);
    i=*(ipar+1);
    if (i==0) {
      if (*u1&gt;0) {
	j=(int)floor(*u1);
      }else{
	j=(int)ceil(*u1);
      }
    }else if (i==1) {
      if (*u1&gt;0) {
	j=(int)floor(*u1+.5);
      }else{
	j=(int)ceil(*u1-.5);
      }
    }else if (i==2) {
      j=(int)ceil(*u1);
    }else if (i==3) {
      j=(int)floor(*u1);
    }
    j=j+1-*ipar;
    j=max(j,1);
    if (nin==2) {
      mu=GetInPortRows(block,2);
      nu=GetInPortCols(block,2);
      uj=GetInPortPtrs(block,2);
      j=min(j,mu*nu);
      memcpy(y,uj+(j-1)*my*ny*so,my*ny*so);
    } else{
      j=min(j,nin-1);
      uj=GetInPortPtrs(block,j+1);
      memcpy(y,uj,my*ny*so);
    }
  }
}
</PRE>

<BR>




</BODY>
</HTML>
