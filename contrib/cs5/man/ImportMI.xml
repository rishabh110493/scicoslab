<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?> 
<!DOCTYPE MAN SYSTEM "../../man.dtd">
<MAN>
  <LANGUAGE>eng</LANGUAGE>
  <TITLE>ImportMI  </TITLE>
  <TYPE>CiudadSim Function  </TYPE>
  <DATE>   </DATE>
  <SHORT_DESCRIPTION name="ImportMI "> MapInfo to scilab interface   </SHORT_DESCRIPTION>
  <CALLING_SEQUENCE>
  <CALLING_SEQUENCE_ITEM>[net,color,Bidir]=ImportMI(name)  </CALLING_SEQUENCE_ITEM>
  </CALLING_SEQUENCE>
  <PARAM>
 <PARAM_INDENT>
  <PARAM_ITEM>
  <PARAM_NAME>net  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    the resulting network 
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>color  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    a vector with the color of the links
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>Bidir  </PARAM_NAME>
  <PARAM_DESCRIPTION>
    a sparse matrix  
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
 </PARAM_INDENT>
  </PARAM>
  <DESCRIPTION>
  <P>
    The purpose of the MapInfo interface is to facilitate the input of the 
    geographical data into the CiudadSim Toolbox and to provide a nicer way of
    displaying the results obtained after the assignment.
    There are two commands : ImportMI (to translate from MI to Scilalb) and
    ExportMI (to translate from Scilab to MI).
  </P>
  <P>
  </P>
  <P>
    The MapInfo files must be done following these directions:
  </P>
  <VERBATIM><![CDATA[

- In MapInfo, open the file CS_empty.tab located in the directory 
examples of the CiudadSim toolbox.

- Save it with another name to be able to modify it. 

- Close the MapInfo table MI_empty and open the one you created. 

- Make the layer editable.

- Press the F key to enter in the fussion mode

- Draw the arcs as polylines. 

- Export the table to obtain two files one .mif and other .mid .

   ]]></VERBATIM>
  <P>
  </P>
  <P>
  </P>
  <P>
    Important Remarks : 
  </P>
  <P>
    1) The extreme of the arcs will be considered as nodes so if you
    want that two arcs share the same node is important to
    draw it like that. That&apos;s why the Fussion mode is important, when
    the pointer is over an already defined node it will change into a cross.
  </P>
  <P>
    2) The style of the polyline is used to differentiate one-way and two-ways links.
    The two-ways links can have any style but one-way links must have style 2. 
    Each two-way link in MapInfo corresponds to two one-way links in Scilab. This 
    correspondance is found in the sparse matrix Bidir.
  </P>
  <P>
  </P>
  <P>
    3) The links can be given different colors, these colors will be in the output as
    the vector color, it can be useful to differentiate subsets of links.
  </P>
  <P>
  </P>
  <P>
  </P>
  <P>
  </P>
  </DESCRIPTION>
  <ITEMIZE label='EXAMPLES'>
  <VERBATIM><![CDATA[
// MapInfo translation from the files SGL_Versailles.mid and SGL_Versailles.mif
// regular town example with four modes and two classes
[%net,color,Bidir]=ImportMI(CS_DIR+"examples/SGL_Versailles");
// Show the translated arcs in Scilab
ShowNet()
// Now you can add demands with AddDemands and the compute the assignment
   ]]></VERBATIM>
  </ITEMIZE>
  <SEE_ALSO>
    <SEE_ALSO_ITEM> <LINK>ExportMI</LINK> </SEE_ALSO_ITEM>
  </SEE_ALSO>
</MAN>
